name: Create binary and publish a Docker image

on:
  push:
    branches: ['main', 'staging']
    paths-ignore:
      - '**/*.md'

env:
  SERVER_DOMAIN: ${{ vars.SERVER_DOMAIN }}
  CONTEXT: ./src

concurrency:
  group: ${{ github.workflow || 'workflow' }}-${{ github.ref || gitea.ref || 'ref' }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    name: Run tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: |
          cd ${{ env.CONTEXT }} &&
          dotnet restore AccessibilityAgent.sln

      - name: Build
        run: |
          cd ${{ env.CONTEXT }} &&
          dotnet build AccessibilityAgent.sln --configuration Release

      - name: Run tests
        run: |
          cd ${{ env.CONTEXT }} &&
          dotnet test AccessibilityAgent.sln --no-build --configuration Release --verbosity minimal

  build-binaries:
    needs: tests
    name: Build binaries (${{ matrix.rid }})
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
          - os: windows-latest
            rid: win-x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Install NativeAOT toolchain (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang lld build-essential zlib1g-dev

      - name: Restore dependencies
        run: |
          cd ${{ env.CONTEXT }} &&
          dotnet restore AccessibilityAgent/AccessibilityAgent.csproj -r ${{ matrix.rid }}

      - name: Build
        run: |
          cd ${{ env.CONTEXT }} &&
          dotnet build AccessibilityAgent/AccessibilityAgent.csproj --no-restore --configuration Release -r ${{ matrix.rid }}

      - name: Publish ${{ matrix.rid }}
        run: |
          cd ${{ env.CONTEXT }} &&
          dotnet publish AccessibilityAgent/AccessibilityAgent.csproj \
            --no-restore --configuration Release \
            -r ${{ matrix.rid }} --self-contained true \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:EnableCompressionInSingleFile=true \
            -o "./publish/${{ matrix.rid }}"

      - name: Upload artifact ${{ matrix.rid }}
        uses: actions/upload-artifact@v3
        with:
          name: accessibilityagent-${{ matrix.rid }}
          path: ${{ env.CONTEXT }}/publish/${{ matrix.rid }}
          if-no-files-found: error

  build-and-push-image:
    needs: tests
    runs-on: ubuntu-latest
    name: Publish image
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: |
          cd ${{ env.CONTEXT }} &&
          dotnet restore AccessibilityAgent.sln

      - name: Build
        run: |
          cd ${{ env.CONTEXT }} &&
          dotnet build AccessibilityAgent.sln --no-restore --configuration Release

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.SERVER_DOMAIN }}/${{ gitea.repository }}/accessibilitychecker

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.SERVER_DOMAIN }}
          username: ${{ secrets.REGISTRY_LOGIN }}
          password: ${{ secrets.TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.CONTEXT }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          cache-from: type=registry,ref=${{ vars.SERVER_DOMAIN }}/${{ gitea.repository }}/accessibilitychecker:buildcache
          cache-to: type=registry,ref=${{ vars.SERVER_DOMAIN }}/${{ gitea.repository }}/accessibilitychecker:buildcache,mode=max
      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@0.28.0
      #   with:
      #     image-ref: '${{ steps.meta.outputs.tags }}'
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'
      # - name: Run dockle
      #   uses: goodwithtech/dockle-action@main
      #   with:
      #     image: '${{ steps.meta.outputs.tags }}'
      #     format: 'list'
      #     exit-code: '1'
      #     exit-level: 'warn'
      #     ignore: 'CIS-DI-0001,CIS-DI-0010,DKL-DI-0006'
      # Push выполняется в build-push-action выше
